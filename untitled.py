# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/199J5Z2DWlhaRpxr6Ymimlm2mCdKWCp1S

**Dataset Information**

The dataset contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2. The latter are NOT linearly separable from each other.

Attribute Information:
1. Sepal Length (cm)
2. Sepal Width (cm)
3. Petal Length (cm)
4. Petal Width (cm)
5. Class of the flower:
  a. Iris Setosa
  b. Iris Versicolor
  c. Iris Virginica

Import Modules
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

"""Loading the dataset"""

df = pd.read_csv('Iris.csv')
df.head()

df = df.drop(columns = ['Id']) # to drop the Id column
df.head()

# To display stats about the data:
df.describe()

# TO display basic information about data-type
df.info()

# To display number of smaples of each class
df['Species'].value_counts()

"""Preprocessing the dataset"""

# Check for NULL values
df.isnull().sum()

"""Exploratory Data Analysis"""

# Histograms
df['SepalLengthCm'].hist()

df['SepalWidthCm'].hist()

df['PetalLengthCm'].hist()

df['PetalWidthCm'].hist()

# Prefer the data which are in Normal Distribution

# Scatter Plot

colors = ['red', 'black', 'blue']
species = ['Iris-virginica', 'Iris-versicolor', 'Iris-setosa']

for i in range(3):
  x = df[df['Species'] == species[i]]
  plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = colors[i], label = species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.legend()

for i in range(3):
  x = df[df['Species'] == species[i]]
  plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = colors[i], label = species[i])
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.legend()

for i in range(3):
  x = df[df['Species'] == species[i]]
  plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label = species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length')
plt.legend()

for i in range(3):
  x = df[df['Species'] == species[i]]
  plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = colors[i], label = species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Petal Width')
plt.legend()

"""**Coorelation Matrix**"""

df.corr()

corr = df.corr()
fig, axs = plt.subplots(figsize = (5,5))
sns.heatmap(corr, annot = True, ax = axs, cmap = 'coolwarm')

"""Label Encoder"""

# Converting the non-int types into machine-readable labels
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Species'] = le.fit_transform(df['Species']) # Here the previously 'Iris-virginica' is converted into numeric form
df.head()

df.info()

"""Model Training"""

from sklearn.model_selection import train_test_split
# train - 70% train
# test - 30% test
X = df.drop(columns = ['Species'])
Y = df['Species']
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.30)

# Logistic Regression
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train, y_train)

# print the metric to get the performance
# print('Accuracy: ', model.score(x_test, y_test)*100)

fileobj = open('iris.pkl', 'wb')
pickle.dump(model, fileobj)